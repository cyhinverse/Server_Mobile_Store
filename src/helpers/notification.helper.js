import notificationService from '../modules/notification/notification.service.js';

/**
 * Helper g·ª≠i th√¥ng b√°o cho c√°c module kh√°c
 */
class NotificationHelper {
	// ƒê∆°n h√†ng thay ƒë·ªïi tr·∫°ng th√°i
	static async sendOrderStatus(userId, orderId, status, orderData) {
		try {
			return await notificationService.createOrderNotification(
				userId,
				orderId,
				status,
				orderData
			);
		} catch (error) {
			console.error('üî¥ L·ªói g·ª≠i th√¥ng b√°o ƒë∆°n h√†ng:', error);
		}
	}

	// Khuy·∫øn m√£i cho 1 user
	static async sendPromotion(userId, promotionId, promotionData) {
		try {
			return await notificationService.createPromotionNotification(
				userId,
				promotionId,
				promotionData
			);
		} catch (error) {
			console.error('üî¥ L·ªói g·ª≠i th√¥ng b√°o khuy·∫øn m√£i:', error);
		}
	}

	// Khuy·∫øn m√£i cho nhi·ªÅu user
	static async sendPromotionToMany(userIds, promotionId, promotionData) {
		try {
			const tasks = userIds.map((id) =>
				this.sendPromotion(id, promotionId, promotionData)
			);
			return await Promise.allSettled(tasks);
		} catch (error) {
			console.error('üî¥ L·ªói g·ª≠i khuy·∫øn m√£i h√†ng lo·∫°t:', error);
		}
	}

	// G·ª≠i ch√†o m·ª´ng
	static async sendWelcome(userId, userData) {
		try {
			const title = {
				vi: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Mobile Store!',
				en: 'Welcome to Mobile Store!',
			};

			const content = {
				vi: `Xin ch√†o ${userData.fullName}! C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n.`,
				en: `Hello ${userData.fullName}! Thank you for registering.`,
			};

			return await notificationService.createNotification({
				userId,
				type: 'account',
				title,
				content,
				metadata: {
					deepLink: '/home',
					icon: 'welcome',
				},
				priority: 'medium',
			});
		} catch (error) {
			console.error('üî¥ L·ªói g·ª≠i th√¥ng b√°o ch√†o m·ª´ng:', error);
		}
	}

	// G·ª≠i x√°c nh·∫≠n thanh to√°n
	static async sendPaymentConfirmation(userId, paymentData) {
		try {
			const title = {
				vi: 'Thanh to√°n th√†nh c√¥ng',
				en: 'Payment successful',
			};

			const content = {
				vi: `B·∫°n ƒë√£ thanh to√°n ${paymentData.amount.toLocaleString(
					'vi-VN'
				)}ƒë cho ƒë∆°n h√†ng #${paymentData.orderNumber}.`,
				en: `You've paid ${paymentData.amount.toLocaleString()}ƒë for order #${
					paymentData.orderNumber
				}.`,
			};

			return await notificationService.createNotification({
				userId,
				type: 'order',
				title,
				content,
				metadata: {
					orderId: paymentData.orderId,
					deepLink: `/orders/${paymentData.orderId}`,
					icon: 'payment',
				},
				priority: 'high',
			});
		} catch (error) {
			console.error('üî¥ L·ªói g·ª≠i x√°c nh·∫≠n thanh to√°n:', error);
		}
	}

	// G·ª≠i th√¥ng b√°o h·ªá th·ªëng
	static async sendSystemToAll(title, content, metadata = {}) {
		try {
			const userIds = await this.getActiveUserIds();
			return await notificationService.createSystemNotification(
				userIds,
				title,
				content,
				metadata
			);
		} catch (error) {
			console.error('üî¥ L·ªói g·ª≠i th√¥ng b√°o h·ªá th·ªëng:', error);
		}
	}

	// Nh·∫Øc nh·ªü gi·ªè h√†ng b·ªè qu√™n
	static async sendAbandonedCart(userId, cartData) {
		try {
			const title = {
				vi: 'B·∫°n c√≥ s·∫£n ph·∫©m ƒëang ch·ªù trong gi·ªè h√†ng',
				en: 'You have items waiting in your cart',
			};

			const content = {
				vi: `C√≥ ${cartData.itemCount} s·∫£n ph·∫©m trong gi·ªè h√†ng c·ªßa b·∫°n.`,
				en: `You have ${cartData.itemCount} items in your cart.`,
			};

			return await notificationService.createNotification({
				userId,
				type: 'system',
				title,
				content,
				metadata: {
					deepLink: '/cart',
					icon: 'cart',
				},
				priority: 'low',
				expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
			});
		} catch (error) {
			console.error('üî¥ L·ªói nh·∫Øc gi·ªè h√†ng:', error);
		}
	}

	// G·ª≠i th√¥ng b√°o s·∫£n ph·∫©m y√™u th√≠ch c√≥ khuy·∫øn m√£i
	static async sendWishlistPromo(userId, productData, promotionData) {
		try {
			const title = {
				vi: 'S·∫£n ph·∫©m y√™u th√≠ch c·ªßa b·∫°n ƒëang gi·∫£m gi√°!',
				en: 'Your favorite product is on sale!',
			};

			const content = {
				vi: `${productData.name} ƒëang gi·∫£m ${promotionData.discountValue}%.`,
				en: `${productData.name} is ${promotionData.discountValue}% off.`,
			};

			return await notificationService.createNotification({
				userId,
				type: 'promotion',
				title,
				content,
				metadata: {
					productId: productData.id,
					promotionId: promotionData.id,
					deepLink: `/products/${productData.id}`,
					icon: 'wishlist',
				},
				priority: 'medium',
				expiresAt: promotionData.endDate,
			});
		} catch (error) {
			console.error('üî¥ L·ªói wishlist promotion:', error);
		}
	}

	// Gi·∫£ l·∫≠p: l·∫•y user active
	static async getActiveUserIds() {
		try {
			// TODO: Replace b·∫±ng UserService.getAllActiveIds()
			return []; // t·∫°m th·ªùi
		} catch (error) {
			console.error('üî¥ L·ªói l·∫•y danh s√°ch user:', error);
			return [];
		}
	}
}

export default NotificationHelper;
