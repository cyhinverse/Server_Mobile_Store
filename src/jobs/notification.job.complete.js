import cron from 'node-cron';
import notificationService from '../modules/notification/notification.service.js';
import { sendEmail } from '../configs/config.nodemailer.js';
import cartModel from '../modules/cart/cart.model.js';
import userModel from '../modules/user/user.model.js';
import discountModel from '../modules/discount/discount.model.js';

/**
 * Job d·ªçn d·∫πp th√¥ng b√°o h·∫øt h·∫°n
 * Ch·∫°y h√†ng ng√†y l√∫c 2:00 AM
 */
const cleanupExpiredNotificationsJob = () => {
	cron.schedule(
		'0 2 * * *',
		async () => {
			try {
				console.log('Starting cleanup of expired notifications...');

				const result = await notificationService.cleanupExpiredNotifications();

				console.log(
					`Cleanup completed. Deleted ${result.deletedCount} expired notifications.`
				);
			} catch (error) {
				console.error('Error during notification cleanup:', error.message);
			}
		},
		{
			scheduled: true,
			timezone: 'Asia/Ho_Chi_Minh',
		}
	);
};

/**
 * Job g·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü gi·ªè h√†ng b·ªè qu√™n
 * Ch·∫°y h√†ng ng√†y l√∫c 10:00 AM v√† 7:00 PM
 */
const abandonedCartReminderJob = () => {
	cron.schedule(
		'0 10,19 * * *',
		async () => {
			try {
				console.log('Starting abandoned cart reminder job...');

				// T√¨m c√°c gi·ªè h√†ng kh√¥ng ƒë∆∞·ª£c c·∫≠p nh·∫≠t trong 24 gi·ªù qua
				const oneDayAgo = new Date();
				oneDayAgo.setHours(oneDayAgo.getHours() - 24);

				const abandonedCarts = await cartModel
					.find({
						updatedAt: { $lt: oneDayAgo },
						items: { $exists: true, $not: { $size: 0 } },
					})
					.populate('user_id', 'email fullName')
					.lean();

				for (const cart of abandonedCarts) {
					if (cart.user_id?.email) {
						// G·ª≠i email nh·∫Øc nh·ªü
						await sendEmail({
							to: cart.user_id.email,
							subject: 'B·∫°n c√≥ s·∫£n ph·∫©m ƒëang ch·ªù trong gi·ªè h√†ng! üõí',
							html: `
								<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
									<h2>Xin ch√†o ${cart.user_id.fullName || 'Kh√°ch h√†ng'},</h2>
									<p>B·∫°n c√≥ <strong>${
										cart.items.length
									} s·∫£n ph·∫©m</strong> ƒëang ch·ªù trong gi·ªè h√†ng.</p>
									<p>ƒê·ª´ng ƒë·ªÉ ch√∫ng ch·ªù l√¢u n·ªØa nh√©! H√£y ho√†n t·∫•t ƒë∆°n h√†ng ƒë·ªÉ nh·∫≠n ƒë∆∞·ª£c nh·ªØng s·∫£n ph·∫©m tuy·ªát v·ªùi n√†y.</p>
									<a href="${process.env.FRONTEND_URL}/cart" 
									   style="background-color: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px; display: inline-block; margin: 16px 0;">
										Xem gi·ªè h√†ng
									</a>
									<p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞∆°ng v√† l·ª±a ch·ªçn ch√∫ng t√¥i!</p>
								</div>
							`,
						});

						// T·∫°o th√¥ng b√°o trong app
						await notificationService.createNotification({
							user_id: cart.user_id._id,
							type: 'cart_reminder',
							title: 'Gi·ªè h√†ng ch·ªù b·∫°n!',
							message: `B·∫°n c√≥ ${cart.items.length} s·∫£n ph·∫©m trong gi·ªè h√†ng. H√£y ho√†n t·∫•t ƒë∆°n h√†ng ngay!`,
							metadata: {
								cartItemCount: cart.items.length,
							},
						});
					}
				}

				console.log(
					`Abandoned cart reminder sent to ${abandonedCarts.length} users.`
				);
			} catch (error) {
				console.error(
					'Error during abandoned cart reminder job:',
					error.message
				);
			}
		},
		{
			scheduled: true,
			timezone: 'Asia/Ho_Chi_Minh',
		}
	);
};

/**
 * Job g·ª≠i th√¥ng b√°o discount h√†ng tu·∫ßn
 * Ch·∫°y v√†o th·ª© 2 h√†ng tu·∫ßn l√∫c 9:00 AM
 */
const weeklyDiscountNotificationJob = () => {
	cron.schedule(
		'0 9 * * 1',
		async () => {
			try {
				console.log('Starting weekly discount notification job...');

				// L·∫•y c√°c discount ƒëang active
				const activeDiscounts = await discountModel
					.find({
						isActive: true,
						startDate: { $lte: new Date() },
						endDate: { $gte: new Date() },
					})
					.lean();

				if (activeDiscounts.length === 0) {
					console.log('No active discounts found.');
					return;
				}

				// L·∫•y t·∫•t c·∫£ users active
				const users = await userModel
					.find({ isActive: true })
					.select('email fullName')
					.lean();

				for (const user of users) {
					if (user.email) {
						// G·ª≠i email discount
						await sendEmail({
							to: user.email,
							subject: 'üéâ ∆Øu ƒë·∫°i h·∫•p d·∫´n tu·∫ßn n√†y - ƒê·ª´ng b·ªè l·ª°!',
							html: generateDiscountEmailTemplate(
								user.fullName,
								activeDiscounts
							),
						});

						// T·∫°o th√¥ng b√°o trong app
						await notificationService.createNotification({
							user_id: user._id,
							type: 'discount_weekly',
							title: '∆Øu ƒë√£i tu·∫ßn m·ªõi!',
							message: `${activeDiscounts.length} ∆∞u ƒë√£i h·∫•p d·∫´n ƒëang ch·ªù b·∫°n. Mua s·∫Øm ngay!`,
							metadata: {
								discountCount: activeDiscounts.length,
								discounts: activeDiscounts.map((d) => ({
									id: d._id,
									code: d.code,
									value: d.discountValue,
									type: d.discountType,
								})),
							},
						});
					}
				}

				console.log(
					`Weekly discount notification sent to ${users.length} users.`
				);
			} catch (error) {
				console.error(
					'Error during weekly discount notification job:',
					error.message
				);
			}
		},
		{
			scheduled: true,
			timezone: 'Asia/Ho_Chi_Minh',
		}
	);
};

/**
 * Job g·ª≠i email sinh nh·∫≠t v·ªõi discount ƒë·∫∑c bi·ªát
 * Ch·∫°y h√†ng ng√†y l√∫c 8:00 AM
 */
const birthdayDiscountJob = () => {
	cron.schedule(
		'0 8 * * *',
		async () => {
			try {
				console.log('Starting birthday discount job...');

				const today = new Date();
				const todayMonth = today.getMonth() + 1;
				const todayDate = today.getDate();

				// T√¨m users c√≥ sinh nh·∫≠t h√¥m nay
				const birthdayUsers = await userModel
					.find({
						isActive: true,
						$expr: {
							$and: [
								{ $eq: [{ $month: '$dateOfBirth' }, todayMonth] },
								{ $eq: [{ $dayOfMonth: '$dateOfBirth' }, todayDate] },
							],
						},
					})
					.select('email fullName dateOfBirth')
					.lean();

				for (const user of birthdayUsers) {
					if (user.email) {
						// T·∫°o m√£ discount sinh nh·∫≠t
						const birthdayDiscountCode = `BIRTHDAY${user._id
							.toString()
							.slice(-6)
							.toUpperCase()}`;

						// G·ª≠i email sinh nh·∫≠t
						await sendEmail({
							to: user.email,
							subject: 'üéÇ Ch√∫c m·ª´ng sinh nh·∫≠t! Qu√† t·∫∑ng ƒë·∫∑c bi·ªát d√†nh cho b·∫°n',
							html: generateBirthdayEmailTemplate(
								user.fullName,
								birthdayDiscountCode
							),
						});

						// T·∫°o th√¥ng b√°o sinh nh·∫≠t
						await notificationService.createNotification({
							user_id: user._id,
							type: 'birthday_discount',
							title: 'Ch√∫c m·ª´ng sinh nh·∫≠t! üéâ',
							message:
								'B·∫°n nh·∫≠n ƒë∆∞·ª£c m√£ gi·∫£m gi√° 20% ƒë·∫∑c bi·ªát nh√¢n d·ªãp sinh nh·∫≠t!',
							metadata: {
								discountCode: birthdayDiscountCode,
								discountValue: 20,
								validUntil: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000), // 7 ng√†y
							},
						});
					}
				}

				console.log(`Birthday discount sent to ${birthdayUsers.length} users.`);
			} catch (error) {
				console.error('Error during birthday discount job:', error.message);
			}
		},
		{
			scheduled: true,
			timezone: 'Asia/Ho_Chi_Minh',
		}
	);
};

/**
 * Job th√¥ng b√°o discount s·∫Øp h·∫øt h·∫°n
 * Ch·∫°y h√†ng ng√†y l√∫c 6:00 PM
 */
const discountExpiryReminderJob = () => {
	cron.schedule(
		'0 18 * * *',
		async () => {
			try {
				console.log('Starting discount expiry reminder job...');

				const tomorrow = new Date();
				tomorrow.setDate(tomorrow.getDate() + 1);
				tomorrow.setHours(23, 59, 59, 999);

				// T√¨m discount s·∫Øp h·∫øt h·∫°n trong 24h
				const expiringDiscounts = await discountModel
					.find({
						isActive: true,
						endDate: { $lte: tomorrow, $gte: new Date() },
					})
					.lean();

				if (expiringDiscounts.length === 0) {
					console.log('No expiring discounts found.');
					return;
				}

				// L·∫•y t·∫•t c·∫£ users
				const users = await userModel
					.find({ isActive: true })
					.select('email fullName')
					.lean();

				for (const user of users) {
					if (user.email) {
						// G·ª≠i email nh·∫Øc nh·ªü
						await sendEmail({
							to: user.email,
							subject: '‚è∞ ∆Øu ƒë√£i s·∫Øp h·∫øt h·∫°n - Nhanh tay ƒë·∫∑t h√†ng!',
							html: generateExpiryReminderEmailTemplate(
								user.fullName,
								expiringDiscounts
							),
						});

						// T·∫°o th√¥ng b√°o
						await notificationService.createNotification({
							user_id: user._id,
							type: 'discount_expiry',
							title: '∆Øu ƒë√£i s·∫Øp h·∫øt h·∫°n!',
							message: `${expiringDiscounts.length} ∆∞u ƒë√£i s·∫Ω h·∫øt h·∫°n trong 24h. Mua s·∫Øm ngay!`,
							metadata: {
								expiringDiscounts: expiringDiscounts.map((d) => ({
									code: d.code,
									value: d.discountValue,
									endDate: d.endDate,
								})),
							},
						});
					}
				}

				console.log(`Discount expiry reminder sent to ${users.length} users.`);
			} catch (error) {
				console.error(
					'Error during discount expiry reminder job:',
					error.message
				);
			}
		},
		{
			scheduled: true,
			timezone: 'Asia/Ho_Chi_Minh',
		}
	);
};

/**
 * Helper function - Template email discount h√†ng tu·∫ßn
 */
const generateDiscountEmailTemplate = (userName, discounts) => {
	const discountList = discounts
		.map(
			(discount) => `
		<div style="border: 1px solid #ddd; padding: 16px; margin: 8px 0; border-radius: 8px;">
			<h3 style="color: #e74c3c; margin: 0 0 8px 0;">
				${discount.code} - ${
				discount.discountType === 'percentage'
					? discount.discountValue + '%'
					: discount.discountValue.toLocaleString() + 'ƒë'
			} OFF
			</h3>
			<p style="margin: 4px 0; color: #666;">
				${discount.description || '√Åp d·ª•ng cho ƒë∆°n h√†ng c·ªßa b·∫°n'}
			</p>
			<p style="margin: 4px 0; font-size: 12px; color: #999;">
				H·∫øt h·∫°n: ${new Date(discount.endDate).toLocaleDateString('vi-VN')}
			</p>
		</div>
	`
		)
		.join('');

	return `
		<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
			<h1 style="color: #2c3e50; text-align: center;">üéâ ∆Øu ƒë√£i tu·∫ßn m·ªõi!</h1>
			<p>Xin ch√†o <strong>${userName || 'Kh√°ch h√†ng'}</strong>,</p>
			<p>Ch√∫ng t√¥i c√≥ nh·ªØng ∆∞u ƒë√£i h·∫•p d·∫´n d√†nh ri√™ng cho b·∫°n tu·∫ßn n√†y:</p>
			${discountList}
			<div style="text-align: center; margin: 24px 0;">
				<a href="${process.env.FRONTEND_URL}/discounts" 
				   style="background-color: #e74c3c; color: white; padding: 16px 32px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: bold;">
					Mua s·∫Øm ngay
				</a>
			</div>
			<p style="color: #666; font-size: 14px;">
				C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† ƒë·ªìng h√†nh c√πng ch√∫ng t√¥i!
			</p>
		</div>
	`;
};

/**
 * Helper function - Template email sinh nh·∫≠t
 */
const generateBirthdayEmailTemplate = (userName, discountCode) => {
	return `
		<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border-radius: 16px;">
			<div style="text-align: center;">
				<h1 style="color: white; font-size: 32px;">üéÇ Ch√∫c m·ª´ng sinh nh·∫≠t!</h1>
				<p style="font-size: 18px;">Ch√∫c <strong>${userName}</strong> m·ªôt ng√†y sinh nh·∫≠t th·∫≠t vui v·∫ª v√† h·∫°nh ph√∫c!</p>
			</div>
			
			<div style="background: white; padding: 24px; margin: 24px 0; border-radius: 12px; color: #333;">
				<h2 style="color: #e74c3c; text-align: center; margin: 0 0 16px 0;">üéÅ Qu√† t·∫∑ng ƒë·∫∑c bi·ªát</h2>
				<div style="text-align: center; background: #f8f9fa; padding: 20px; border-radius: 8px; border: 2px dashed #e74c3c;">
					<h3 style="color: #e74c3c; margin: 0 0 8px 0; font-size: 24px;">${discountCode}</h3>
					<p style="margin: 0; font-size: 18px; font-weight: bold; color: #2c3e50;">GI·∫¢M 20% to√†n b·ªô ƒë∆°n h√†ng</p>
					<p style="margin: 8px 0 0 0; color: #666; font-size: 14px;">C√≥ hi·ªáu l·ª±c trong 7 ng√†y</p>
				</div>
			</div>

			<div style="text-align: center;">
				<a href="${process.env.FRONTEND_URL}?discount=${discountCode}" 
				   style="background-color: #e74c3c; color: white; padding: 16px 32px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: bold; font-size: 16px;">
					S·ª≠ d·ª•ng ngay
				</a>
			</div>

			<p style="text-align: center; margin: 24px 0 0 0; opacity: 0.9;">
				M·ªôt l·∫ßn n·ªØa, ch√∫c b·∫°n sinh nh·∫≠t vui v·∫ª! üéâ
			</p>
		</div>
	`;
};

/**
 * Helper function - Template email nh·∫Øc nh·ªü discount h·∫øt h·∫°n
 */
const generateExpiryReminderEmailTemplate = (userName, expiringDiscounts) => {
	const discountList = expiringDiscounts
		.map(
			(discount) => `
		<tr style="border-bottom: 1px solid #eee;">
			<td style="padding: 12px; font-weight: bold; color: #e74c3c;">${
				discount.code
			}</td>
			<td style="padding: 12px;">${
				discount.discountType === 'percentage'
					? discount.discountValue + '%'
					: discount.discountValue.toLocaleString() + 'ƒë'
			} OFF</td>
			<td style="padding: 12px; color: #e74c3c; font-weight: bold;">${new Date(
				discount.endDate
			).toLocaleDateString('vi-VN')}</td>
		</tr>
	`
		)
		.join('');

	return `
		<div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
			<div style="background: #fff3cd; border: 1px solid #ffeaa7; padding: 16px; border-radius: 8px; margin-bottom: 20px;">
				<h1 style="color: #856404; margin: 0; text-align: center;">‚è∞ ∆Øu ƒë√£i s·∫Øp h·∫øt h·∫°n!</h1>
			</div>
			
			<p>Xin ch√†o <strong>${userName || 'Kh√°ch h√†ng'}</strong>,</p>
			<p>C√°c ∆∞u ƒë√£i sau s·∫Ω <strong style="color: #e74c3c;">h·∫øt h·∫°n trong 24 gi·ªù t·ªõi</strong>. ƒê·ª´ng b·ªè l·ª° c∆° h·ªôi ti·∫øt ki·ªám n√†y!</p>
			
			<table style="width: 100%; border-collapse: collapse; margin: 20px 0; background: #f8f9fa; border-radius: 8px; overflow: hidden;">
				<thead>
					<tr style="background: #e74c3c; color: white;">
						<th style="padding: 12px; text-align: left;">M√£ gi·∫£m gi√°</th>
						<th style="padding: 12px; text-align: left;">Gi√° tr·ªã</th>
						<th style="padding: 12px; text-align: left;">H·∫øt h·∫°n</th>
					</tr>
				</thead>
				<tbody>
					${discountList}
				</tbody>
			</table>

			<div style="text-align: center; margin: 24px 0;">
				<a href="${process.env.FRONTEND_URL}/shop" 
				   style="background-color: #e74c3c; color: white; padding: 16px 32px; text-decoration: none; border-radius: 8px; display: inline-block; font-weight: bold;">
					Mua s·∫Øm ngay
				</a>
			</div>

			<p style="color: #666; font-size: 14px; text-align: center;">
				Nhanh tay k·∫ªo l·ª°! C√°c ∆∞u ƒë√£i n√†y ch·ªâ c√≥ trong th·ªùi gian ng·∫Øn.
			</p>
		</div>
	`;
};

/**
 * Kh·ªüi ƒë·ªông t·∫•t c·∫£ notification jobs
 */
export const startNotificationJobs = () => {
	console.log('Starting notification jobs...');

	cleanupExpiredNotificationsJob();
	abandonedCartReminderJob();
	weeklyDiscountNotificationJob();
	birthdayDiscountJob();
	discountExpiryReminderJob();

	console.log('All notification jobs started successfully.');
};

export default {
	startNotificationJobs,
	cleanupExpiredNotificationsJob,
	abandonedCartReminderJob,
	weeklyDiscountNotificationJob,
	birthdayDiscountJob,
	discountExpiryReminderJob,
};
